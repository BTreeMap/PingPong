name: CI

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'

jobs:
  setup-env:
    # Prepare common variables: date, timestamp, repo, and short SHA
    runs-on: ubuntu-24.04
    if: github.event_name == 'schedule' || (github.event_name == 'push' && contains(github.event.head_commit.message, 'run-ci'))
    outputs:
      date: ${{ steps.vars.outputs.date }}
      date_time: ${{ steps.vars.outputs.date_time }}
      source_date_epoch: ${{ steps.vars.outputs.source_date_epoch }}
      repo: ${{ steps.vars.outputs.repo }}
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Generate common variables
        id: vars
        run: |
          now=$(date '+%s')
          date=$(date -u -d "@$now" '+%Y-%m-%d')
          date_time=$(date -u -d "@$now" '+%Y-%m-%d.%H-%M-%S')
          year_month=$(date -u -d "@$now" '+%Y-%m')
          source_date_epoch=$(date -u -d "${year_month}-01 00:00:00" '+%s')
          echo "date=$date" >> $GITHUB_OUTPUT
          echo "date_time=$date_time" >> $GITHUB_OUTPUT
          echo "source_date_epoch=$source_date_epoch" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

  build-matrix:
    needs: setup-env
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: amd64
            runner: ubuntu-24.04
          - platform: arm64
            runner: ubuntu-24.04-arm
    permissions:
      contents: write
      packages: write

    env:
      DATE: ${{ needs.setup-env.outputs.date }}
      DATE_TIME: ${{ needs.setup-env.outputs.date_time }}
      SOURCE_DATE_EPOCH: ${{ needs.setup-env.outputs.source_date_epoch }}
      REPO: ${{ needs.setup-env.outputs.repo }}
      SHA: ${{ needs.setup-env.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libbpf-dev libbpf1 libelf-dev pkgconf
          curl -fsSL https://apt.llvm.org/llvm.sh | sudo bash -s -- ${LLVM_VERSION} all
          for tool in \
            clang clang++ clang-format clang-tidy clangd \
            lldb lld llc \
            llvm-ar llvm-as llvm-link llvm-nm llvm-objdump \
            llvm-profdata llvm-cov; \
          do \
            sudo ln -sf /usr/bin/${tool}-${LLVM_VERSION} ${LLVM_HOME}/${tool} && command -v ${tool}; \
          done
        env:
          DEBIAN_FRONTEND: noninteractive
          LLVM_VERSION: 19
          LLVM_HOME: /usr/local/bin

      - name: Build project
        run: |
          make clean
          make all

      - name: Package build artifacts
        run: |
          mkdir -p artifacts/pingpong-${{ matrix.platform }}
          cp build/pingpong-* artifacts/pingpong-${{ matrix.platform }}
          mkdir -p docker/pingpong
          cp build/pingpong-* docker/pingpong
          tar -czf artifacts/pingpong-${{ matrix.platform }}.tar.gz -C artifacts pingpong-${{ matrix.platform }}
          rm -rf artifacts/pingpong-${{ matrix.platform }}

      - name: Set release version
        id: version
        run: |
          ver="${DATE_TIME}.${SHA}"
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          target_commitish: ${{ github.sha }}
          prerelease: true
          files: |
            artifacts/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker Image
        uses: docker/build-push-action@v6
        with:
          context: docker
          file: docker/Dockerfile
          platforms: linux/${{ matrix.platform }}
          build-args: |
            PLATFORM=${{ matrix.platform }}
          tags: |
            ghcr.io/${{ env.REPO }}:${{ steps.version.outputs.version }}-${{ matrix.platform }}
          outputs: "type=registry,compression=zstd,force-compression=true,compression-level=3,rewrite-timestamp=true,oci-mediatypes=true"
  
  create-manifest:
    needs: [setup-env, build-matrix]
    permissions:
      packages: write
    runs-on: ubuntu-24.04
    env:
      DOCKER_IMAGE_NAME: ghcr.io/${{ needs.setup-env.outputs.repo }}
      DATE_VAR: ${{ needs.setup-env.outputs.date }}
      DATE_TIME_VAR: ${{ needs.setup-env.outputs.date_time }}
      SHA_VAR: ${{ needs.setup-env.outputs.short_sha }}
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest list
        run: |
          version="${DATE_TIME_VAR}.${SHA_VAR}"
          AMD64_TAG="${DOCKER_IMAGE_NAME}:${version}-amd64"
          ARM64_TAG="${DOCKER_IMAGE_NAME}:${version}-arm64"

          # All the tags we want to create
          TAG_OPTIONS=()
          TAGS=(
            "latest"
            "${DATE_VAR}"
            "${DATE_TIME_VAR}"
            "${DATE_VAR}.${SHA_VAR}"
            "${DATE_TIME_VAR}.${SHA_VAR}"
          )

          # Build the tag options for docker buildx imagetools
          for tag in "${TAGS[@]}"; do
            TAG_OPTIONS+=(--tag "${DOCKER_IMAGE_NAME}:${tag}")
          done

          # Create a single manifest with multiple tags
          echo "Creating manifest with tags: ${TAGS[*]}"
          docker buildx imagetools create "${TAG_OPTIONS[@]}" "${AMD64_TAG}" "${ARM64_TAG}"
        env:
          DOCKER_IMAGE_NAME: ${{ needs.setup-env.outputs.repo }}
          DATE_VAR: ${{ needs.setup-env.outputs.date }}
          DATE_TIME_VAR: ${{ needs.setup-env.outputs.date_time }}
          SHA_VAR: ${{ needs.setup-env.outputs.short_sha }}